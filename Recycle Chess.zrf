; RecycleChess
; Implemented by Michael Taktikos 2021.
;
; *** Copyright 1998-2002 Zillions Development
; v.2.0

; MACROS

(define put-in-hand 
  mark 
  cascade 
  OFF next 
  (while (and not-empty? (not-position? OFF)) next) 
  to 
  back
)

; allows only the first piece of any type of piece in hand to be dropped
; this reduces the number of moves Zillions has to generate
(define verify-first (verify (in-zone? off-zone)) mark prev (while (not-position? OFF) (verify (not-piece? $1)) prev) (go mark))

; MOVES

; deploy - $1 = piece name
(define deploy ((verify-first $1) END next (while (not-position? END) (if empty? add) next)))

; limited-deploy - $1 = piece name
; It loops through the board positions rank by rank. Some pieces cannot be dropped on certain back ranks.
; This macro stops looping when it gets to the nearest of these back ranks.
(define pawn-deploy ((verify-first Pawn) END next next next next next next next next next (while (not-in-zone? Pawn-stop-zone) (if empty? add) next)))

(define leap (
   $1
   (verify friend?)
   (verify (not-piece? King))
   (put-in-hand)
   add))

(define leape (
   $1
   (verify not-friend?)
   add))

(define leap2 (
   $1 $2
 (verify friend?)
   (verify (not-piece? King))
   (put-in-hand)
   add))
  
(define leap2e (
   $1 $2
(verify not-friend?)
 add))

(define ride  (
   $1 (while empty? add $1)
   (verify friend?)
   (verify (not-piece? King))
   (set-attribute unmoved-rook? false)
   (put-in-hand)
   add))

(define ridee  (
   $1 (while empty? add $1)
   (verify not-friend?)
   (set-attribute unmoved-rook? false)
   add))

(define slide  (
   $1 (while empty? add $1)
   (verify friend?)
   (verify (not-piece? King))
   (put-in-hand)
   add))
(define slidee  (
   $1 (while empty? add $1)
   (verify not-friend?)
   add))

; PIECE MOVE SETS

(define knight-moves (leap2 n nw) (leap2 n ne) (leap2 e ne) (leap2 e se) (leap2 s se) 
(leap2 s sw) (leap2 w sw) (leap2 w nw) (leap2e n nw) (leap2e n ne) (leap2e e ne) (leap2e e se) (leap2e s se) 
(leap2e s sw) (leap2e w sw) (leap2e w nw))
(define bishop-moves (slide ne) (slide nw) (slide se) (slide sw) 
(slidee ne) (slidee nw) (slidee se) (slidee sw))
(define rook-moves (ride n) (ride s) (ride e) (ride w)(ridee n) (ridee s) (ridee e) (ridee w))
(define qrook-moves (slide n) (slide s) (slide e) (slide w) (slidee n) (slidee s) (slidee e) (slidee w))

(define King-leap ($1 (verify not-empty?) (if friend? (put-in-hand)) (set-attribute never-moved? false) add))
(define King-leape ($1 (verify empty?) (set-attribute never-moved? false) add))

(define O-O
  ( (verify never-moved?)
    mark
    e ; KB1
    (verify empty?)
    e ; KN1
    (verify empty?)
    cascade
    e ; KR1
    (verify unmoved-rook?)
    from
    back ; K1
    ; Save expensive not-attacked?s for last
    (verify not-attacked?)
    e ; KB1
    (verify not-attacked?)
    to
    (set-attribute unmoved-rook? false)
    ; We could check if KN1 is attacked too, but this isn't
    ; really necessary since Zillions doesn't allow any moves
    ; into check
    e ; KN1
    (set-attribute never-moved? false)
    add
    )
  )

(define O-O-O
     ( (verify never-moved?)
	   mark
       w ; Q1
       (verify empty?)
       w ; QB1
       (verify empty?)
       cascade
       w ; QN1
       (verify empty?)
       w ; QR1
       ; If any piece but a friendly Rook was in the Rook's starting square,
       ; the never-moved attribute would be false.
       (verify unmoved-rook?)
       from
       back ; K1
         ; Save expensive not-attacked?s for last
       (verify not-attacked?)
       w ; Q1
       (verify not-attacked?)
       to
       (set-attribute unmoved-rook? false)
         ; We could check if KN1 is attacked too, but this isn't
         ; really necessary since Zillions doesn't allow any moves
         ; into check
       w ; QB1
       (set-attribute never-moved? false)
       add
     )
)

(define Pawn-add (if (in-zone? promotion-zone) capture else add))

(define Pawn-move ($1 (verify empty?) (Pawn-add) (verify (in-zone? third-rank)) $1
      (verify empty?) add))

;(define promote to (change-type $1) (set-attribute promoted-pawn? $2) (put-in-hand) add)

(define Pawn-capture ($1 (verify friend?)(verify (not-piece? King)) (put-in-hand) (if (in-zone? promotion-zone) capture) add))
(define Pawn-capturee ($1 (verify enemy?) add (if (in-zone? promotion-zone) capture)))
(define En-Passant ($1 (verify enemy?) (verify last-to?) (verify (piece? Pawn))
    n (verify (last-from? n)) to s (put-in-hand) add))

(game
 (title "Recycle Chess")
 (description "Recycle Chess is played in the site Brainking, it is simply 
 Crazyhouse Chess with option to self-capture")

 (history 

"")
 
 (strategy "")

 (players White Black)
 (turn-order White Black)
 (pass-turn false)

 (board
  (image "images\recyclechess\recycle.bmp")
  (grid
   (start-rectangle 6 28 56 78)
   (dimensions
    ("Od/Oc/x/a/b/c/d/e/f/g/h/z/Ob/Oa" (49 0)) ; files
    ("8/7/6/5/4/3/2/1" (0 49)) ; ranks
    )
   (directions (n 0 -1) (e 1 0) (s 0 1) (w -1 0)
	       (ne 1 -1) (nw -1 -1) (se 1 1) (sw -1 1)
	       )
   )
  (symmetry Black (n s)(s n) (nw sw)(sw nw) (ne se)(se ne) (next prev) (prev next))
  (dummy OFF END)
  (kill-positions x1 x2 x3 x4 x5 x6 x7 x8 z1 z2 z3 z4 z5 z6 z7 z8)
  (unlink Oa8 Oa7 Oa6 Oa5 Oa4 Oa3 Oa2 Oa1 Ob8 Ob7 Ob6 Ob5 Ob4 Ob3 Ob2 Ob1 Oc8 Oc7 Oc6 Oc5 Oc4 Oc3 Oc2 Oc1 Od8 Od7 Od6 Od5 Od4 Od3 Od2 Od1)
  (links next 	; loops through board positions
	 (END a1)
	 (a1 b1) (b1 c1) (c1 d1) (d1 e1) (e1 f1) (f1 g1) (g1 h1)    (h1 a2)
	 (a2 b2) (b2 c2) (c2 d2) (d2 e2) (e2 f2) (f2 g2) (g2 h2)    (h2 a3)
	 (a3 b3) (b3 c3) (c3 d3) (d3 e3) (e3 f3) (f3 g3) (g3 h3)    (h3 a4)
	 (a4 b4) (b4 c4) (c4 d4) (d4 e4) (e4 f4) (f4 g4) (g4 h4)    (h4 a5)
	 (a5 b5) (b5 c5) (c5 d5) (d5 e5) (e5 f5) (f5 g5) (g5 h5)    (h5 a6)
	 (a6 b6) (b6 c6) (c6 d6) (d6 e6) (e6 f6) (f6 g6) (g6 h6)    (h6 a7)
	 (a7 b7) (b7 c7) (c7 d7) (d7 e7) (e7 f7) (f7 g7) (g7 h7)    (h7 a8)
	 (a8 b8) (b8 c8) (c8 d8) (d8 e8) (e8 f8) (f8 g8) (g8 h8)    (h8 END)
	 
					; loops through off-board positions
	 (OFF Oa1)
	 (Oa1 Oa2) (Oa2 Oa3) (Oa3 Oa4) (Oa4 Oa5) (Oa5 Oa6) (Oa6 Oa7) (Oa7 Oa8) (Oa8 Ob1)
	 (Ob1 Ob2) (Ob2 Ob3) (Ob3 Ob4) (Ob4 Ob5) (Ob5 Ob6) (Ob6 Ob7) (Ob7 Ob8) (Ob8 Oc1)
	 (Oc1 Oc2) (Oc2 Oc3) (Oc3 Oc4) (Oc4 Oc5) (Oc5 Oc6) (Oc6 Oc7) (Oc7 Oc8) (Oc8 Od1)
	 (Od1 Od2) (Od2 Od3) (Od3 Od4) (Od4 Od5) (Od5 Od6) (Od6 Od7) (Od7 Od8) (Od8 OFF)
	)

  (links prev   ; loops through board positions
	 (END h8)
	 (h8 g8) (g8 f8) (f8 e8) (e8 d8) (d8 c8) (c8 b8) (b8 a8)     (a8 h7)
	 (h7 g7) (g7 f7) (f7 e7) (e7 d7) (d7 c7) (c7 b7) (b7 a7)     (a7 h6)
	 (h6 g6) (g6 f6) (f6 e6) (e6 d6) (d6 c6) (c6 b6) (b6 a6)     (a6 h5)
	 (h5 g5) (g5 f5) (f5 e5) (e5 d5) (d5 c5) (c5 b5) (b5 a5)     (a5 h4)
	 (h4 g4) (g4 f4) (f4 e4) (e4 d4) (d4 c4) (c4 b4) (b4 a4)     (a4 h3)
	 (h3 g3) (g3 f3) (f3 e3) (e3 d3) (d3 c3) (c3 b3) (b3 a3)     (a3 h2)
	 (h2 g2) (g2 f2) (f2 e2) (e2 d2) (d2 c2) (c2 b2) (b2 a2)     (a2 h1)
	 (h1 g1) (g1 f1) (f1 e1) (e1 d1) (d1 c1) (c1 b1) (b1 a1)     (a1 END)

	 ; loops through off-board positions

	 (OFF Od8)
	 (Od8 Od7) (Od7 Od6) (Od6 Od5) (Od5 Od4) (Od4 Od3) (Od3 Od2) (Od2 Od1) (Od1 Oc8)
	 (Oc8 Oc7) (Oc7 Oc6) (Oc6 Oc5) (Oc5 Oc4) (Oc4 Oc3) (Oc3 Oc2) (Oc2 Oc1) (Oc1 Ob8)
	 (Ob8 Ob7) (Ob7 Ob6) (Ob6 Ob5) (Ob5 Ob4) (Ob4 Ob3) (Ob3 Ob2) (Ob2 Ob1) (Ob1 Oa8)
	 (Oa8 Oa7) (Oa7 Oa6) (Oa6 Oa5) (Oa5 Oa4) (Oa4 Oa3) (Oa3 Oa2) (Oa2 Oa1) (Oa1 OFF)
	 )
  (zone (name off-zone) (players White Black) (positions Oa8 Oa7 Oa6 Oa5 Oa4 Oa3 Oa2 Oa1 Ob8 Ob7 Ob6 Ob5 Ob4 Ob3 Ob2 Ob1 Oc8 Oc7 Oc6 Oc5 Oc4 Oc3 Oc2 Oc1 Od8 Od7 Od6 Od5 Od4 Od3 Od2 Od1))

  (zone (name promotion-zone) (players White) (positions a8 b8 c8 d8 e8 f8 g8 h8))
  (zone (name promotion-zone) (players Black) (positions a1 b1 c1 d1 e1 f1 g1 h1))
  (zone (name third-rank) (players White) (positions a3 b3 c3 d3 e3 f3 g3 h3))
  (zone (name third-rank) (players Black) (positions a6 b6 c6 d6 e6 f6 g6 h6))
  (zone (name Pawn-stop-zone) (players White) (positions a8))
  (zone (name Pawn-stop-zone) (players Black) (positions h1))
 )

 (board-setup
  (White
   (Pawn a2 b2 c2 d2 e2 f2 g2 h2)
   (Knight b1 g1)
   (Bishop c1 f1)
   (Rook a1 h1)
   (Queen d1)
   (King e1)
   )
  (Black
   (Pawn a7 b7 c7 d7 e7 f7 g7 h7)
   (Knight b8 g8)
   (Bishop c8 f8)
   (Rook a8 h8)
   (Queen d8)
   (King e8)
   )
  )

(piece
 (name Queen)
 (help "Queen (R+B): can slide any number of squares in any direction")
 (description "Queen\A Queen moves any number of squares in a straight
line.  It may not leap over other pieces.")
 (attribute promoted-pawn? false)
 (image White "images\chess\WQueen.bmp" Black "images\chess\BQueen.bmp")
 (moves (rook-moves) (bishop-moves) (deploy Queen))
 )
 
 (piece
 (name Pawn)
 (help "Pawn: moves forward, captures diagonally, can promote on 8th row")
 (description "Pawn\A Pawn can move straight ahead one square, or two squares from its starting position.  A Pawn captures by moving one square ahead and diagonally.  If a Pawn reaches the far rank, it promotes to a Knight, Bishop, or Rook, but not to any compound piece.  On rare occasions Pawns can also execute a move called `En Passant`, or `in passing`.  This allows a Pawn to take an enemy Pawn that has just moved two squares.")
 (image White "images\chess\WPawn.bmp" Black "images\chess\BPawn.bmp")
 (moves
  (Pawn-capture nw)
  (Pawn-capture ne)
  (Pawn-capturee nw)
  (Pawn-capturee ne)
  (Pawn-move n)
  (En-Passant e)
  (En-Passant w)
  (pawn-deploy)
  )
 )

(piece
 (name Knight)
 (help "Knight: moves like an `L`, 2 squares one way and one the other")
 (description "Knight\A Knight moves like an `L`, two squares vertically plus one horizontally, or two squares horizontally plus one vertically. It hops over any pieces on the way.")
 (attribute promoted-pawn? false)
 (image White "images\chess\WKnight.bmp" Black "images\chess\BKnight.bmp")
 (moves (knight-moves) (deploy Knight))
 )

(piece
 (name Bishop)
 (help "Bishop: slides diagonally any number of squares")
 (description "Bishop\A Bishop moves any number of squares on a diagonal. It may not leap over other pieces.")
 (attribute promoted-pawn? false)
 (image White "images\chess\WBishop.bmp" Black "images\chess\BBishop.bmp")
 (moves (bishop-moves) (deploy Bishop))
 )
  
(piece
 (name Rook)
 (help "Rook: slides any number of squares along the row or column.")
 (description "Rook\A Rook moves any number of squares orthogonally on a rank or a file.  It may not leap over other pieces (except the King during a Castling move).")
 (image White "images\chess\WRook.bmp" Black "images\chess\BRook.bmp")
 (attribute promoted-pawn? false)
 (attribute unmoved-rook? true)
 (moves (rook-moves) (deploy Rook))
 )
  
(piece
 (name King)
 (help "King: steps 1 square in any direction to a safe square")
 (description "King\A King can move to any adjacent square, but never to a square where it can be captured.  It may also `castle` with the Rook if neither the Rook nor King has moved yet and there is nothing in between them.  In castling the King moves two squares nearer the Rook and the Rook leaps to the far side of the King.  You may not castle out of or through check, or if the King or Rook involved has previously moved.")
 (image White "images\chess\WKing.bmp" Black "images\chess\BKing.bmp")
 (attribute promoted-pawn? false)
 (attribute never-moved? true)
 (moves
  (King-leap n)
  (King-leap e)
  (King-leap s)
  (King-leap w)
  (King-leap ne)
  (King-leap nw)
  (King-leap se)
  (King-leap sw)
(King-leape n)
  (King-leape e)
  (King-leape s)
  (King-leape w)
  (King-leape ne)
  (King-leape nw)
  (King-leape se)
  (King-leape sw)
  (O-O)
  (O-O-O)
  )
 )

(loss-condition (White Black) (checkmated King))
(draw-condition (White Black) stalemated)
)



